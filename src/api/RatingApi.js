/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Rating from '../model/Rating';

/**
* Rating service.
* @module api/RatingApi
* @version 1.0.0
*/
export default class RatingApi {

    /**
    * Constructs a new RatingApi. 
    * @alias module:api/RatingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createrating operation.
     * @callback module:api/RatingApi~createratingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Rating} rating data to be created
     * @param {module:api/RatingApi~createratingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rating}
     */
    createrating(rating, callback) {
      let postBody = rating;
      // verify the required parameter 'rating' is set
      if (rating === undefined || rating === null) {
        throw new Error("Missing the required parameter 'rating' when calling createrating");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rating;
      return this.apiClient.callApi(
        '/rating', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleterating operation.
     * @callback module:api/RatingApi~deleteratingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} ratingId the Id parameter
     * @param {module:api/RatingApi~deleteratingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleterating(ratingId, callback) {
      let postBody = null;
      // verify the required parameter 'ratingId' is set
      if (ratingId === undefined || ratingId === null) {
        throw new Error("Missing the required parameter 'ratingId' when calling deleterating");
      }

      let pathParams = {
        'ratingId': ratingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/{ratingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllrating operation.
     * @callback module:api/RatingApi~getAllratingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rating>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/RatingApi~getAllratingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rating>}
     */
    getAllrating(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Rating];
      return this.apiClient.callApi(
        '/rating/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getrating operation.
     * @callback module:api/RatingApi~getratingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} ratingId the Id parameter
     * @param {module:api/RatingApi~getratingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rating}
     */
    getrating(ratingId, callback) {
      let postBody = null;
      // verify the required parameter 'ratingId' is set
      if (ratingId === undefined || ratingId === null) {
        throw new Error("Missing the required parameter 'ratingId' when calling getrating");
      }

      let pathParams = {
        'ratingId': ratingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rating;
      return this.apiClient.callApi(
        '/rating/{ratingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updaterating operation.
     * @callback module:api/RatingApi~updateratingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} ratingId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Rating} opts.rating data to be updated
     * @param {module:api/RatingApi~updateratingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rating}
     */
    updaterating(ratingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rating'];
      // verify the required parameter 'ratingId' is set
      if (ratingId === undefined || ratingId === null) {
        throw new Error("Missing the required parameter 'ratingId' when calling updaterating");
      }

      let pathParams = {
        'ratingId': ratingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rating;
      return this.apiClient.callApi(
        '/rating/{ratingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
