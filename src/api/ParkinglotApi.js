/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Parkinglot from '../model/Parkinglot';

/**
* Parkinglot service.
* @module api/ParkinglotApi
* @version 1.0.0
*/
export default class ParkinglotApi {

    /**
    * Constructs a new ParkinglotApi. 
    * @alias module:api/ParkinglotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createparkinglot operation.
     * @callback module:api/ParkinglotApi~createparkinglotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Parkinglot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Parkinglot} parkinglot data to be created
     * @param {module:api/ParkinglotApi~createparkinglotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Parkinglot}
     */
    createparkinglot(parkinglot, callback) {
      let postBody = parkinglot;
      // verify the required parameter 'parkinglot' is set
      if (parkinglot === undefined || parkinglot === null) {
        throw new Error("Missing the required parameter 'parkinglot' when calling createparkinglot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Parkinglot;
      return this.apiClient.callApi(
        '/parkinglot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteparkinglot operation.
     * @callback module:api/ParkinglotApi~deleteparkinglotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} parkinglotId the Id parameter
     * @param {module:api/ParkinglotApi~deleteparkinglotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteparkinglot(parkinglotId, callback) {
      let postBody = null;
      // verify the required parameter 'parkinglotId' is set
      if (parkinglotId === undefined || parkinglotId === null) {
        throw new Error("Missing the required parameter 'parkinglotId' when calling deleteparkinglot");
      }

      let pathParams = {
        'parkinglotId': parkinglotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/parkinglot/{parkinglotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllparkinglot operation.
     * @callback module:api/ParkinglotApi~getAllparkinglotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Parkinglot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/ParkinglotApi~getAllparkinglotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Parkinglot>}
     */
    getAllparkinglot(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Parkinglot];
      return this.apiClient.callApi(
        '/parkinglot/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getparkinglot operation.
     * @callback module:api/ParkinglotApi~getparkinglotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Parkinglot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} parkinglotId the Id parameter
     * @param {module:api/ParkinglotApi~getparkinglotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Parkinglot}
     */
    getparkinglot(parkinglotId, callback) {
      let postBody = null;
      // verify the required parameter 'parkinglotId' is set
      if (parkinglotId === undefined || parkinglotId === null) {
        throw new Error("Missing the required parameter 'parkinglotId' when calling getparkinglot");
      }

      let pathParams = {
        'parkinglotId': parkinglotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Parkinglot;
      return this.apiClient.callApi(
        '/parkinglot/{parkinglotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateparkinglot operation.
     * @callback module:api/ParkinglotApi~updateparkinglotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Parkinglot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} parkinglotId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Parkinglot} opts.parkinglot data to be updated
     * @param {module:api/ParkinglotApi~updateparkinglotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Parkinglot}
     */
    updateparkinglot(parkinglotId, opts, callback) {
      opts = opts || {};
      let postBody = opts['parkinglot'];
      // verify the required parameter 'parkinglotId' is set
      if (parkinglotId === undefined || parkinglotId === null) {
        throw new Error("Missing the required parameter 'parkinglotId' when calling updateparkinglot");
      }

      let pathParams = {
        'parkinglotId': parkinglotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Parkinglot;
      return this.apiClient.callApi(
        '/parkinglot/{parkinglotId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
