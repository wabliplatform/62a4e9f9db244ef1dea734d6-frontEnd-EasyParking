/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Rental from '../model/Rental';

/**
* Rental service.
* @module api/RentalApi
* @version 1.0.0
*/
export default class RentalApi {

    /**
    * Constructs a new RentalApi. 
    * @alias module:api/RentalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createrental operation.
     * @callback module:api/RentalApi~createrentalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rental} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Rental} rental data to be created
     * @param {module:api/RentalApi~createrentalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rental}
     */
    createrental(rental, callback) {
      let postBody = rental;
      // verify the required parameter 'rental' is set
      if (rental === undefined || rental === null) {
        throw new Error("Missing the required parameter 'rental' when calling createrental");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rental;
      return this.apiClient.callApi(
        '/rental', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleterental operation.
     * @callback module:api/RentalApi~deleterentalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} rentalId the Id parameter
     * @param {module:api/RentalApi~deleterentalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleterental(rentalId, callback) {
      let postBody = null;
      // verify the required parameter 'rentalId' is set
      if (rentalId === undefined || rentalId === null) {
        throw new Error("Missing the required parameter 'rentalId' when calling deleterental");
      }

      let pathParams = {
        'rentalId': rentalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rental/{rentalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllrental operation.
     * @callback module:api/RentalApi~getAllrentalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rental>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/RentalApi~getAllrentalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rental>}
     */
    getAllrental(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Rental];
      return this.apiClient.callApi(
        '/rental/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getrental operation.
     * @callback module:api/RentalApi~getrentalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rental} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} rentalId the Id parameter
     * @param {module:api/RentalApi~getrentalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rental}
     */
    getrental(rentalId, callback) {
      let postBody = null;
      // verify the required parameter 'rentalId' is set
      if (rentalId === undefined || rentalId === null) {
        throw new Error("Missing the required parameter 'rentalId' when calling getrental");
      }

      let pathParams = {
        'rentalId': rentalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rental;
      return this.apiClient.callApi(
        '/rental/{rentalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updaterental operation.
     * @callback module:api/RentalApi~updaterentalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rental} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} rentalId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Rental} opts.rental data to be updated
     * @param {module:api/RentalApi~updaterentalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rental}
     */
    updaterental(rentalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rental'];
      // verify the required parameter 'rentalId' is set
      if (rentalId === undefined || rentalId === null) {
        throw new Error("Missing the required parameter 'rentalId' when calling updaterental");
      }

      let pathParams = {
        'rentalId': rentalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rental;
      return this.apiClient.callApi(
        '/rental/{rentalId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
